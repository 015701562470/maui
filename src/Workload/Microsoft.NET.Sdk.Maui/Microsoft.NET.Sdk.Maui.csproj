<Project Sdk="Microsoft.Build.NoTargets">

  <Import Project="../Shared/Common.targets" />

  <PropertyGroup>
    <PackageId>$(PackageId).Manifest-$(DotNetMauiManifestVersionBand)</PackageId>
    <Description>.NET MAUI workload manifest</Description>
  </PropertyGroup>

  <Import Project="$(MauiRootDirectory)eng/ReplaceText.targets" />

  <ItemGroup>
    <None Update="WorkloadManifest.targets" CopyToOutputDirectory="PreserveNewest" Pack="true" PackagePath="data" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="../Microsoft.Maui.*/*.csproj" />
    <ProjectReference Include="$(MauiRootDirectory)src/SingleProject/Resizetizer/src/Resizetizer.csproj" />
  </ItemGroup>

  <ItemGroup>
    <_JsonInputFile Include="WorkloadManifest.in.json" OutputPath="$(IntermediateOutputPath)WorkloadManifest.json" Pack="true" />
    <_JsonInputFile Include="WorkloadManifest.in.targets" OutputPath="$(IntermediateOutputPath)WorkloadManifest.targets" Pack="true" />
    <_JsonInputFile Include="Rollback.in.json" OutputPath="$(IntermediateOutputPath)Rollback.json" Pack="false" />
    <_JsonInputFile Include="SdkInstaller.in.json" OutputPath="$(IntermediateOutputPath)SdkInstaller.json" Pack="false" />
  </ItemGroup>

  <Target Name="_GenerateWorkloadManifest"
      BeforeTargets="Build;AssignTargetPaths"
      DependsOnTargets="SetVersions"
      Inputs="$(MSBuildProjectFile);$(MauiRootDirectory)eng/Versions.props;@(_JsonInputFile)"
      Outputs="@(_JsonInputFile->'%(OutputPath)')">
    <ItemGroup>
      <_VersionsToReplace Include="MicrosoftDotnetSdkInternalPackageVersion" />
      <_VersionsToReplace Include="MicrosoftNETCoreAppRefPackageVersion" />
      <_VersionsToReplace Include="MicrosoftAndroidSdkWindowsPackageVersion" />
      <_VersionsToReplace Include="MicrosoftiOSSdkPackageVersion" />
      <_VersionsToReplace Include="MicrosoftMacCatalystSdkPackageVersion" />
      <_VersionsToReplace Include="MicrosoftmacOSSdkPackageVersion" />
      <_VersionsToReplace Include="MicrosofttvOSSdkPackageVersion" />
      <_VersionsToReplace Include="MicrosoftNETWorkloadEmscriptenPackageVersion" />
      <_VersionsToReplace Include="DotNetMauiManifestVersionBand" />
      <_VersionsToReplace Include="DotNetMonoManifestVersionBand" />
      <_VersionsToReplace Include="DotNetEmscriptenManifestVersionBand" />
      <_VersionsToReplace Include="DotNetAndroidManifestVersionBand" />
      <_VersionsToReplace Include="DotNetMaciOSManifestVersionBand" />
      <_VersionsToReplace Include="MicrosoftAspNetCoreAuthorizationPackageVersion" />
      <_VersionsToReplace Include="MicrosoftAspNetCoreComponentsAnalyzersPackageVersion" />
      <_VersionsToReplace Include="MicrosoftAspNetCoreComponentsFormsPackageVersion" />
      <_VersionsToReplace Include="MicrosoftAspNetCoreComponentsPackageVersion" />
      <_VersionsToReplace Include="MicrosoftAspNetCoreComponentsWebPackageVersion" />
      <_VersionsToReplace Include="MicrosoftAspNetCoreComponentsWebViewPackageVersion" />
      <_VersionsToReplace Include="MicrosoftAspNetCoreMetadataPackageVersion" />
      <_VersionsToReplace Include="MicrosoftJSInteropPackageVersion" />
      <_VersionsToReplace Update="@(_VersionsToReplace)" PropertyName="%(Identity)" />
      <_VersionsToReplace Include="VERSION" PropertyName="PackageReferenceVersion" />
      <_VersionsToReplace Include="MAUI_DOTNET_VERSION_MAJOR" PropertyName="_MauiDotNetVersionMajor" />
      <_VersionsToReplace Include="MAUI_DOTNET_VERSION" PropertyName="_MauiDotNetVersion" />
      <_VersionsToReplace Include="MAUI_PREVIOUS_DOTNET_VERSION_MAJOR" PropertyName="_MauiPreviousDotNetVersionMajor" />
      <_VersionsToReplace Include="MAUI_PREVIOUS_DOTNET_VERSION" PropertyName="_MauiPreviousDotNetVersion" />
      <_VersionsToReplace Include="MAUI_PREVIOUS_DOTNET_VERSION_NO_DOT" PropertyName="_MauiPreviousDotNetVersionNoDot" />
      <_VersionsToReplace Include="MAUI_PREVIOUS_DOTNET_RELEASED_NUGET_VERSION" PropertyName="MicrosoftMauiPreviousDotNetReleasedVersion" />
    </ItemGroup>
    <CreateItem
        Include="@(_JsonInputFile)"
        AdditionalMetadata="OldValue=@%(_VersionsToReplace.Identity)@;NewValue=$(%(_VersionsToReplace.PropertyName))">
        <Output
            TaskParameter="Include"
            ItemName="_JsonVariableMatrix"/>
    </CreateItem>
    <Copy
        SourceFiles="%(_JsonInputFile.Identity)"
        DestinationFiles="%(_JsonInputFile.OutputPath)"
    />
    <ReplaceText
        Input="%(_JsonVariableMatrix.OutputPath)"
        Output="%(_JsonVariableMatrix.OutputPath)"
        OldValue="%(_JsonVariableMatrix.OldValue)"
        NewValue="%(_JsonVariableMatrix.NewValue)"
    />
    <ItemGroup>
      <FileWrites Include="@(_JsonInputFile->'%(OutputPath)')" />
      <None Include="%(_JsonInputFile.OutputPath)" Link="$([System.IO.Path]::GetFileName('%(_JsonInputFile.OutputPath)'))" CopyToOutputDirectory="PreserveNewest" Pack="%(_JsonInputFile.Pack)" PackagePath="data" Visible="false" />
    </ItemGroup>
  </Target>

  <Target Name="_GenerateVSWorkloadProps" AfterTargets="Build" Inputs="$(MSBuildProjectFile);$(MauiRootDirectory)eng/automation/vs-workload.template.props" Outputs="$(PackageOutputPath)/vs-workload.props">
    <ItemGroup>
      <_WorkloadPropsReplacements Include="@PACK_VERSION_LONG@"     NewValue="$(PackageReferenceVersion)" />
      <_WorkloadPropsReplacements Include="@VS_COMPONENT_VERSION@"  NewValue="$(VSComponentVersion)" />
      <_WorkloadPropsReplacements Include="@VSMAN_VERSION@"         NewValue="net7.0" /> <!-- TODO: Replace with $(_MauiDotNetTfm) -->
    </ItemGroup>
    <Copy
      SourceFiles="$(MauiRootDirectory)eng/automation/vs-workload.template.props"
      DestinationFiles="$(PackageOutputPath)/vs-workload.props"
    />
    <ReplaceText
        Input="$(PackageOutputPath)/vs-workload.props"
        Output="$(PackageOutputPath)/vs-workload.props"
        OldValue="%(_WorkloadPropsReplacements.Identity)"
        NewValue="%(_WorkloadPropsReplacements.NewValue)"
    />
    <ItemGroup>
      <FileWrites Include="$(PackageOutputPath)/vs-workload.props" />
    </ItemGroup>
  </Target>

  <Target Name="_CopyAdditionalFIles" AfterTargets="Build">
    <Copy SourceFiles="$(OutputPath)Rollback.json" DestinationFiles="$(PackageOutputPath)/metadata/rollbacks/$(Version)/$(GitSha).json" />
    <Copy SourceFiles="$(OutputPath)Rollback.json" DestinationFiles="$(PackageOutputPath)/metadata/rollbacks/$(Version)/$(GitSemVerLabel).$(BUILDVERSION).json" />
    <Copy SourceFiles="$(OutputPath)Rollback.json" DestinationFiles="$(PackageOutputPath)/metadata/rollbacks/$(Version)/$(GitSemVerLabel).json" />
    <Copy SourceFiles="$(OutputPath)Rollback.json" DestinationFiles="$(PackageOutputPath)/metadata/rollbacks/$(Version)/$(PackageReferenceVersion).json" />
    <Copy SourceFiles="$(OutputPath)Rollback.json" DestinationFiles="$(PackageOutputPath)/metadata/rollbacks/$(GitSha).json" />
    <Copy SourceFiles="$(OutputPath)Rollback.json" DestinationFiles="$(PackageOutputPath)/metadata/rollbacks/$(GitSemVerLabel).json" />
    <Copy SourceFiles="$(OutputPath)Rollback.json" DestinationFiles="$(PackageOutputPath)/metadata/rollbacks/$(GitBranch).json" />
    <Copy SourceFiles="$(OutputPath)Rollback.json" DestinationFiles="$(PackageOutputPath)/metadata/rollbacks/$(PackageReferenceVersion).json" />
    <Copy SourceFiles="$(OutputPath)SdkInstaller.json" DestinationFiles="$(PackageOutputPath)/metadata/sdks/$(Version)/$(GitSha).json" />
    <Copy SourceFiles="$(OutputPath)SdkInstaller.json" DestinationFiles="$(PackageOutputPath)/metadata/sdks/$(Version)/$(GitSemVerLabel).$(BUILDVERSION).json" />
    <Copy SourceFiles="$(OutputPath)SdkInstaller.json" DestinationFiles="$(PackageOutputPath)/metadata/sdks/$(Version)/$(GitSemVerLabel).json" />
    <Copy SourceFiles="$(OutputPath)SdkInstaller.json" DestinationFiles="$(PackageOutputPath)/metadata/sdks/$(Version)/$(PackageReferenceVersion).json" />
    <Copy SourceFiles="$(OutputPath)SdkInstaller.json" DestinationFiles="$(PackageOutputPath)/metadata/sdks/$(GitSha).json" />
    <Copy SourceFiles="$(OutputPath)SdkInstaller.json" DestinationFiles="$(PackageOutputPath)/metadata/sdks/$(GitSemVerLabel).json" />
    <Copy SourceFiles="$(OutputPath)SdkInstaller.json" DestinationFiles="$(PackageOutputPath)/metadata/sdks/$(GitBranch).json" />
    <Copy SourceFiles="$(OutputPath)SdkInstaller.json" DestinationFiles="$(PackageOutputPath)/metadata/sdks/$(PackageReferenceVersion).json" />
  </Target>

  <Target Name="_CopyManifest" AfterTargets="Build">
    <ItemGroup>
      <_Files Include="$(OutputPath)WorkloadManifest.*" />
    </ItemGroup>
    <Copy SourceFiles="@(_Files)" DestinationFolder="$(DotNetSdkManifestsDirectory)$(MSBuildProjectName.ToLowerInvariant())" />
  </Target>

  <!-- These are the darc dependency items we need to solicit feeds from  -->
  <ItemGroup>
    <_DarcDependency Include="Microsoft.Dotnet.Sdk.Internal" Version="$(MicrosoftDotnetSdkInternalPackageVersion)" />
    <_DarcDependency Include="Microsoft.NETCore.App.Ref" Version="$(MicrosoftNETCoreAppRefPackageVersion)" />
    <_DarcDependency Include="Microsoft.Android.Sdk.Windows" Version="$(MicrosoftAndroidSdkWindowsPackageVersion)" />
    <_DarcDependency Include="Microsoft.MacCatalyst.Sdk" Version="$(MicrosoftMacCatalystSdkPackageVersion)" />
    <_DarcDependency Include="Microsoft.macOS.Sdk" Version="$(MicrosoftmacOSSdkPackageVersion)" />
    <_DarcDependency Include="Microsoft.iOS.Sdk" Version="$(MicrosoftiOSSdkPackageVersion)" />
    <_DarcDependency Include="Microsoft.tvOS.Sdk" Version="$(MicrosofttvOSSdkPackageVersion)" />
    <_DarcDependency Include="$(MicrosoftNETWorkloadEmscriptenSdkDarcName)" Version="$(MicrosoftNETWorkloadEmscriptenPackageVersion)" />
    <_DarcDependency Include="Microsoft.AspNetCore.Authorization" Version="$(MicrosoftAspNetCoreAuthorizationPackageVersion)" />
  </ItemGroup>

  <PropertyGroup Condition="$([MSBuild]::IsOSPlatform('windows'))">
    <DarcCommand>darc get-asset --name %(_DarcDependency.Identity) --version %(_DarcDependency.Version) --max-age 90 --password $env:BAR_PAT</DarcCommand>
  </PropertyGroup>
  <PropertyGroup Condition="$([MSBuild]::IsOSPlatform('osx'))">
    <DarcCommand>darc get-asset --name %(_DarcDependency.Identity) --version %(_DarcDependency.Version) --max-age 90 --password $BAR_PAT</DarcCommand>
  </PropertyGroup>
  
  <!-- For each dependency item, execute darc get-asset to list out the version info with feeds -->
  <Target Name="_DarcGetAssetNugetFeeds" AfterTargets="Build" Outputs="%(_DarcDependency.Identity)">

    <Exec Command="$(DarcCommand)" ConsoleToMSBuild="True">
      <Output TaskParameter="ConsoleOutput" ItemName="_DarcGetAssetOutput" />
    </Exec>

    <!-- Reverse the output since we always want the last feed in the list/output -->
    <ItemGroup>
      <_DarcGetAssetOutputReverse
        Include="@(_DarcGetAssetOutput->Reverse())" />
    </ItemGroup>

    <!-- Get the first url matching the pattern: ` - https://[feedurlhere]/index.json (NugetFeed)` -->
    <!-- Using regex for each line of the darc tool output -->
    <PropertyGroup>
      <_DarcGetCurrentAssetFeed
        Condition="$([System.Text.RegularExpressions.Regex]::IsMatch('%(_DarcGetAssetOutputReverse.Identity)', '-\s+http.+/index\.json\s+\(NugetFeed\)'))">$([System.Text.RegularExpressions.Regex]::Match('%(_DarcGetAssetOutputReverse.Identity)', 'http\S+/index\.json'))</_DarcGetCurrentAssetFeed>
    </PropertyGroup>

    <!-- Finally, add the regex extracted feed to the itemgroup  -->
    <ItemGroup>
      <_DarcAssetFeed Include="$(_DarcGetCurrentAssetFeed)" />
    </ItemGroup>
  </Target>

  <!-- Takes all the batched up feeds and writes out a nuget.config file -->
  <Target Name="_DarcAssetFeedCreateNuGetConfig" AfterTargets="_DarcGetAssetNugetFeeds">

    <Message Text="Darc Asset Feeds:" />
    <Message Text="  %(_DarcAssetFeed.Identity)" />

    <!-- First create an empty nuget config file -->
    <Exec Command="dotnet new nugetconfig --force --output $(OutputPath)" />

    <!-- Remove the default nuget url since the new template already has it -->
    <ItemGroup>
      <_DarcAssetFeed
        Remove="https://api.nuget.org/v3/index.json"
        Condition="'%(_DarcAssetFeed.Identity)' == 'https://api.nuget.org/v3/index.json'" />
    </ItemGroup>

    <!-- Add each of the aggregated feeds to the nuget config -->
    <Exec Command="dotnet nuget add source %(_DarcAssetFeed.Identity) --configfile $(OutputPath)nuget.config" />

    <!-- Copy to the artifact folders to be archived -->
    <Copy SourceFiles="$(OutputPath)nuget.config" DestinationFiles="$(PackageOutputPath)/metadata/feeds/$(Version)/$(GitSha)/NuGet.Config" />
    <Copy SourceFiles="$(OutputPath)nuget.config" DestinationFiles="$(PackageOutputPath)/metadata/feeds/$(Version)/$(GitSemVerLabel).$(BUILDVERSION)/NuGet.Config" />
    <Copy SourceFiles="$(OutputPath)nuget.config" DestinationFiles="$(PackageOutputPath)/metadata/feeds/$(Version)/$(GitSemVerLabel)/NuGet.Config" />
    <Copy SourceFiles="$(OutputPath)nuget.config" DestinationFiles="$(PackageOutputPath)/metadata/feeds/$(Version)/$(PackageReferenceVersion)/NuGet.Config" />
    <Copy SourceFiles="$(OutputPath)nuget.config" DestinationFiles="$(PackageOutputPath)/metadata/feeds/$(GitSha)/NuGet.Config" />
    <Copy SourceFiles="$(OutputPath)nuget.config" DestinationFiles="$(PackageOutputPath)/metadata/feeds/$(GitSemVerLabel)/NuGet.Config" />
    <Copy SourceFiles="$(OutputPath)nuget.config" DestinationFiles="$(PackageOutputPath)/metadata/feeds/$(GitBranch)/NuGet.Config" />
    <Copy SourceFiles="$(OutputPath)nuget.config" DestinationFiles="$(PackageOutputPath)/metadata/feeds/$(PackageReferenceVersion)/NuGet.Config" />
  </Target>
</Project>