<Project>

  <PropertyGroup>
    <MauiWorkloadVersion>@VERSION@</MauiWorkloadVersion>
    <_MauiFirstWorkloadVersion>@MAUI_DOTNET_VERSION@</_MauiFirstWorkloadVersion>
    <_MauiLastWorkloadVersion>@LAST_WORKLOAD_VERSION@</_MauiLastWorkloadVersion>
    <MauiWorkloadTargetFramework>@TFM@</MauiWorkloadTargetFramework>
    <MauiVersion Condition=" '$(MauiVersion)' == '' ">$(MauiWorkloadVersion)</MauiVersion>

    <!--
      All the packaging type logic can be ignored with:
        <MauiIgnoreWorkloadPackagingType>true</MauiIgnoreWorkloadPackagingType>
    -->
    <_MauiPackagingTypeIsWorkload Condition="
      '$(MauiIgnoreWorkloadPackagingType)' != 'true' and
      $([MSBuild]::VersionGreaterThan($(MauiVersion), '$(_MauiFirstWorkloadVersion)')) and
      $([MSBuild]::VersionLessThanOrEquals($(MauiVersion), '$(_MauiLastWorkloadVersion)'))">true</_MauiPackagingTypeIsWorkload>
    <_MauiPackagingTypeIsNuGetPackages Condition="'$(_MauiPackagingTypeIsWorkload)' != 'true'">true</_MauiPackagingTypeIsNuGetPackages>

    <!--
      Indicates that the Microsoft.Maui.Controls.Compatibility package should be implicitly
      referenced.  This will eventually switch to false by default and become opt, in,
      however Visual Studio currently depends on this assembly being loaded for Live Visual Tree.
    -->
    <UseMauiCompat Condition=" '$(UseMauiCompat)' == '' and '$(UseMaui)' == 'true' ">true</UseMauiCompat>
  </PropertyGroup>

  <!--
    This part sets up properties for "compatibility" with workload-based builds of .NET MAUI.
  -->
  <PropertyGroup Condition="'$(_MauiPackagingTypeIsWorkload)' == 'true'">
    <!-- $(_MauiPlatformName) is used as RIDs as well as a suffix to targeting pack names -->
    <_MauiPlatformName Condition=" '$(TargetPlatformIdentifier)' == 'windows' ">win</_MauiPlatformName>
    <_MauiPlatformName Condition=" '$(TargetPlatformIdentifier)' != 'windows' ">$(TargetPlatformIdentifier.ToLowerInvariant())</_MauiPlatformName>
    <_MauiPlatformName Condition=" '$(_MauiPlatformName)' == '' ">any</_MauiPlatformName>
    <_MauiRuntimePackAlwaysCopyLocal Condition=" '$(_MauiPlatformName)' == 'any' ">true</_MauiRuntimePackAlwaysCopyLocal>
  </PropertyGroup>

  <!--
    If we are using a workload-based builds of .NET MAUI, then make sure we list the frameworks we are using.
  -->
  <ItemGroup Condition="'$(_MauiPackagingTypeIsWorkload)' == 'true'">
    <KnownFrameworkReference
        Condition=" '$(UseMaui)' == 'true' or '$(UseMauiCore)' == 'true' "
        Include="Microsoft.Maui.Core"
        TargetFramework="$(MauiWorkloadTargetFramework)"
        RuntimeFrameworkName="Microsoft.Maui.Core"
        DefaultRuntimeFrameworkVersion="$(MauiVersion)"
        LatestRuntimeFrameworkVersion="$(MauiVersion)"
        TargetingPackName="Microsoft.Maui.Core.Ref.$(_MauiPlatformName)"
        TargetingPackVersion="$(MauiVersion)"
        RuntimePackNamePatterns="Microsoft.Maui.Core.Runtime.**RID**"
        RuntimePackRuntimeIdentifiers="$(_MauiPlatformName)"
        Profile="$(TargetPlatformIdentifier)"
        RuntimePackAlwaysCopyLocal="$(_MauiRuntimePackAlwaysCopyLocal)"
    />
    <KnownFrameworkReference
        Condition=" '$(UseMaui)' == 'true' "
        Include="Microsoft.Maui.Controls"
        TargetFramework="$(MauiWorkloadTargetFramework)"
        RuntimeFrameworkName="Microsoft.Maui.Controls"
        DefaultRuntimeFrameworkVersion="$(MauiVersion)"
        LatestRuntimeFrameworkVersion="$(MauiVersion)"
        TargetingPackName="Microsoft.Maui.Controls.Ref.$(_MauiPlatformName)"
        TargetingPackVersion="$(MauiVersion)"
        RuntimePackNamePatterns="Microsoft.Maui.Controls.Runtime.**RID**"
        RuntimePackRuntimeIdentifiers="$(_MauiPlatformName)"
        Profile="$(TargetPlatformIdentifier)"
        RuntimePackAlwaysCopyLocal="$(_MauiRuntimePackAlwaysCopyLocal)"
    />
    <KnownFrameworkReference
        Condition=" '$(UseMaui)' == 'true' or '$(UseMauiEssentials)' == 'true' "
        Include="Microsoft.Maui.Essentials"
        TargetFramework="$(MauiWorkloadTargetFramework)"
        RuntimeFrameworkName="Microsoft.Maui.Essentials"
        DefaultRuntimeFrameworkVersion="$(MauiVersion)"
        LatestRuntimeFrameworkVersion="$(MauiVersion)"
        TargetingPackName="Microsoft.Maui.Essentials.Ref.$(_MauiPlatformName)"
        TargetingPackVersion="$(MauiVersion)"
        RuntimePackNamePatterns="Microsoft.Maui.Essentials.Runtime.**RID**"
        RuntimePackRuntimeIdentifiers="$(_MauiPlatformName)"
        Profile="$(TargetPlatformIdentifier)"
        RuntimePackAlwaysCopyLocal="$(_MauiRuntimePackAlwaysCopyLocal)"
    />
  </ItemGroup>
  <ItemGroup Condition="'$(DisableImplicitFrameworkReferences)' != 'true' and '$(_MauiPackagingTypeIsWorkload)' == 'true'">
    <FrameworkReference
        Condition=" '$(UseMaui)' == 'true' or '$(UseMauiCore)' == 'true' "
        Include="Microsoft.Maui.Core"
        IsImplicitlyDefined="true"
        Pack="false"
        PrivateAssets="All"
        DefaultRuntimeFrameworkVersion="$(MauiVersion)"
        LatestRuntimeFrameworkVersion="$(MauiVersion)"
        TargetingPackVersion="$(MauiVersion)"
    />
    <FrameworkReference
        Condition=" '$(UseMaui)' == 'true' "
        Include="Microsoft.Maui.Controls"
        IsImplicitlyDefined="true"
        Pack="false"
        PrivateAssets="All"
        DefaultRuntimeFrameworkVersion="$(MauiVersion)"
        LatestRuntimeFrameworkVersion="$(MauiVersion)"
        TargetingPackVersion="$(MauiVersion)"
    />
    <FrameworkReference
        Condition=" '$(UseMaui)' == 'true' or '$(UseMauiEssentials)' == 'true' "
        Include="Microsoft.Maui.Essentials"
        IsImplicitlyDefined="true"
        Pack="false"
        PrivateAssets="All"
        DefaultRuntimeFrameworkVersion="$(MauiVersion)"
        LatestRuntimeFrameworkVersion="$(MauiVersion)"
        TargetingPackVersion="$(MauiVersion)"
    />
  </ItemGroup>

  <!--
    After both the implicit packages and the user/project packages are added, we need to
    remove any duplicates that we have added. In older versions of the IDE, the package manager
    only supported Include so we could check here, however it now supports Update so we need to
    make sure they are already available to be updated.

    But the issue comes in if the user is on an existing project - or likes to use Include. In
    these instances, we need to now remove out implicit packages.

    This logic only installs packages if and only if $(UseMauiNuGets) is not true. This property
    allows the user to totally override all the default nugets installed.
  -->
  <ItemGroup Condition=" '$(EnableMauiImplicitPackageReferences)' != 'false' and '$(UseMauiNuGets)' != 'true' ">
    <_MauiAddedImplicitPackageReference Include="@(PackageReference->HasMetadata('IsMauiImplicitPackageReference'))" />
    <_MauiAddedUserPackageReference Include="@(PackageReference->WithMetadataValue('IsMauiImplicitPackageReference',''))" />
    <_MauiMissingImplicitPackageReference Include="@(_MauiAddedImplicitPackageReference)" Exclude="@(_MauiAddedUserPackageReference)" />
    <PackageReference Remove="@(PackageReference)" />
    <PackageReference Include="@(_MauiAddedUserPackageReference);@(_MauiMissingImplicitPackageReference)" />
  </ItemGroup>

</Project>