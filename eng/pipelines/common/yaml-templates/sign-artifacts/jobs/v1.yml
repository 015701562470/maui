parameters:
  # job parameters
  name: 'signing'                                           # The name of the job
  displayName: 'Sign NuGets'                                # The human name
  dependsOn: []                                             # The dependencies
  preSignSteps: []                                          # Any steps to run before the signing
  postSignSteps: []                                         # Any additional steps to run after the signing
  signTags: 'false'                                         # Whether or not to sign the source tags (refs/tags/*)
  signMain: 'false'                                         # Whether or not to sign the main/master branches
  forceSignVariable: 'ForceArtifactSigning'                 # The variable to check to see if signing should be forced
  additionalConditions: 'false'                             # Any additional conditions to check for
  timeoutInMinutes: 60                                      # The timeout
  realSign: 'false'                                         # 'true' -- enable RealSigning, 'false' -- disable Realsigning

  # signing parameters
  targetFolder: '$(Build.ArtifactStagingDirectory)/signed'  # The folder to download the signed artifacts to            # eg: $(Build.ArtifactStagingDirectory)/signed
  sourceRepo: '$(Build.Repository.Name)'                    # The repository that this build is trying to sign          # typically: $(BUILD_REPOSITORY_NAME)
  jenkinsEndpoint: '$(Signing.Endpoint)'                    # The endpoint name for the Jenkins server                  # typically: Xamarin Code Signing Jenkins
  jenkinsJob: '$(Signing.Job)'                              # The definition of the build to use to get the artifacts   # typically: sign-from-vsts
  artifactHost: '$(Signing.ArtifactHost)'                   # The host for the signing artifacts                        # typically: https://dl.internalx.com/vsts-devdiv
  githubToken: '$(GitHub.Token)'                            # The GitHub token to use to access the signed artifacts    # typically: <use any PAT that has access>

jobs:
  - ${{ if eq(variables['System.TeamProject'], 'devdiv') }}:
    - job: ${{ parameters.name }}
      displayName: ${{ parameters.displayName }}
      timeoutInMinutes: ${{ parameters.timeoutInMinutes }} 
      variables:
        skipComponentGovernanceDetection: true
      dependsOn: ${{ parameters.dependsOn }}
      pool:
        name: VSEng-XamarinCustom
        demands:
          - corpnet
      condition: and(
        succeeded(),
        or(
          and(
            eq('${{ parameters.signTags }}', 'true'),
            startsWith(variables['Build.SourceBranch'], 'refs/tags/')
          ),
          and(
            eq('${{ parameters.signMain }}', 'true'),
            or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
          ),
          and(
            ne('${{ parameters.forceSignVariable }}', ''),
            eq(variables['${{ parameters.forceSignVariable }}'], 'true')
          ),
          eq(${{ parameters.additionalConditions }}, 'true')
        ))
      steps:
        - checkout: none
        - ${{ parameters.preSignSteps }}
        - template: ../steps/v1.yml
          parameters:
            targetFolder: ${{ parameters.targetFolder }}
            sourceRepo: ${{ parameters.sourceRepo }}
            jenkinsEndpoint: ${{ parameters.jenkinsEndpoint }}
            jenkinsJob: ${{ parameters.jenkinsJob }}
            artifactHost: ${{ parameters.artifactHost }}
            githubToken: ${{ parameters.githubToken }}
            codeSignOverride: ${{ parameters.realSign }}
        - ${{ parameters.postSignSteps }}
        - task: PublishBuildArtifacts@1
          displayName: 'Publish the nuget-signed artifacts'
          inputs:
            artifactName: nuget-signed
            pathToPublish: ${{ parameters.targetFolder }}
