####################################################################################################
# SIGN AZURE DEVOPS ARTIFACTS
#
# This template will sign the artifacts in the source folder and place the signed versions in the
# target folder.
#
# Typical usage is:
#
#  resources:
#    repositories:
#      - repository: xamarin-templates
#        type: github
#        name: xamarin/yaml-templates
#        endpoint: <name of service connection to use to access github.com>
#
#  ...
#
#  jobs:
#    - job: <job-name>
#      name: VSEngSS-MicroBuild2019-1ES
#      demands:
#        - msbuild
#      steps:
#        - template: sign-artifacts/steps/v2.yml@xamarin-templates
#          parameters:
#            sourceFolder: $(Build.ArtifactStagingDirectory)/unsigned
#            targetFolder: $(Build.ArtifactStagingDirectory)/signed
#
####################################################################################################

parameters:
  sourceFolder: '$(Build.ArtifactStagingDirectory)\unsigned'        # The folder that contains all the artifacts that require signing   # eg: '$(Build.ArtifactStagingDirectory)\unsigned' OR 'output\nugets'
  targetFolder: '$(Build.ArtifactStagingDirectory)\signed'          # The folder to download the signed artifacts to                    # eg: '$(Build.ArtifactStagingDirectory)/signed' OR 'output\nugets-signed'
  workingDirectory: '$(Agent.TempDirectory)\artifact-signing'       # The folder to download scripts and extract files in               # eg: '$(Agent.TempDirectory)\artifact-signing' OR 'output\working'
  signType: ''                                                      # The type of signing to perform                                    # eg: 'Test', 'Real', '' (detect)
  teamName: 'Xamarin'                                               # The team name to use when signing                                 # eg: 'Xamarin' / 'Maui'
  templateBranch: 'main'
  archiveType: 'nupkg'                                              # Valid options are nupkg or zip
  signListFile: ''
  nugetVersionSpec: 6.x                                             # NuGet version to use for repacking and verifying nupkgs

steps:
  - task: NuGetToolInstaller@1
    displayName: Use NuGet ${{ parameters.nugetVersionSpec }}
    inputs:
      versionSpec: ${{ parameters.nugetVersionSpec }}

  - powershell: |
      $signType = '${{ parameters.signType }}'

      if ($signType -eq '') {
        $branch = '$(Build.SourceBranch)'
        $reason = '$(Build.Reason)'
        
        $isMainBranch = ($branch -eq 'refs/heads/main') -or ($branch -eq 'refs/heads/master')
        $isTag = ($branch.StartsWith('refs/tags/'))
        $isNotPR = ($reason -ne 'PullRequest')
        
        if (($isMainBranch -or $isTag) -and $isNotPR) {
          $signType = 'Real'
        } else {
          $signType = 'Test'
        }
      } else {
        if ($signType -ne 'Real' -and $signType -ne 'Test') {
            Write-Host "##vso[task.logissue type=error]signType parameter set to an unexpected value '$signType'. Expected 'Real' or 'Test'"
            exit 1
        }
      }

      Write-Host "_SIGN_TYPE: '$signType'"
      Write-Host "##vso[task.setvariable variable=_SIGN_TYPE]$signType"
    displayName: 'Verify/Determine SignType'

  - task: MicroBuildSigningPlugin@4
    displayName: 'Prepare Signing Tools'
    inputs:
      signType: '$(_SIGN_TYPE)'
    env:
      TeamName: '${{ parameters.teamName }}'

  - powershell: |
      New-Item "${{ parameters.workingDirectory }}" -ItemType Directory -Force | Out-Null

      $downloader = New-Object System.Net.WebClient
      $downloader.Headers["Authorization"] = 'token $(Github.Token)'
      $downloader.DownloadFile(
        "https://raw.githubusercontent.com/xamarin/yaml-templates/${{ parameters.templateBranch }}/sign-artifacts/steps/v2-SignFiles.proj",
        "${{ parameters.workingDirectory }}\SignFiles.proj")
      $downloader.DownloadFile(
        "https://raw.githubusercontent.com/xamarin/yaml-templates/${{ parameters.templateBranch }}/sign-artifacts/steps/v2-Extract.ps1",
        "${{ parameters.workingDirectory }}\Extract.ps1")
      $downloader.DownloadFile(
        "https://raw.githubusercontent.com/xamarin/yaml-templates/${{ parameters.templateBranch }}/sign-artifacts/steps/v2-CompressZips.ps1",
        "${{ parameters.workingDirectory }}\CompressZips.ps1")
    displayName: 'Download Signing Scripts'

  - powershell: |
      .\Extract.ps1 -ArchiveType "${{ parameters.archiveType }}" -SourceDir "${{ parameters.sourceFolder }}" -DestinationDir "${{ parameters.workingDirectory }}\extracted"
    workingDirectory: '${{ parameters.workingDirectory }}'
    displayName: 'Extract Archive Packages'

  - powershell: |
      if ("${{ parameters.signListFile }}" -eq "") {
        $props = "${{ parameters.sourceFolder }}\SignList.xml"
      } else {
        $props = "${{ parameters.signListFile }}"
      }

      $dest = "${{ parameters.workingDirectory }}\extracted\SignList.xml"
      (Get-Content $props).Replace("*", "%2A") | Set-Content -Path $dest

      $propsDir = [System.IO.Path]::GetDirectoryName($props)
      $targets = "$propsDir\SignList.targets"
      if ([System.IO.File]::Exists($targets)) {
        Copy-Item $targets -Destination "${{ parameters.workingDirectory }}\extracted\SignList.targets"
      }
    displayName: 'Escape SignList.xml and copy SignList.targets if it exists'

  - task: MSBuild@1
    displayName: 'Sign Package Contents'
    inputs:
      solution: '${{ parameters.workingDirectory }}\SignFiles.proj'
      msbuildArguments: '/t:SignFiles /v:diag /p:SignType=$(_SIGN_TYPE) /p:MicroBuildPluginDirectory=$(MicroBuildOverridePluginDirectory) /p:WorkingDir="${{ parameters.workingDirectory }}\extracted"'

  - task: NuGetCommand@2
    displayName: 'Re-pack NuGet Packages'
    condition: eq('${{ parameters.archiveType }}', 'nupkg')
    inputs:
      command: 'pack'
      packagesToPack: '${{ parameters.workingDirectory }}\extracted\*\*.nuspec'
      packDestination: '${{ parameters.workingDirectory }}\packed'

  - powershell: |
      .\CompressZips.ps1 -SourceDir "${{ parameters.workingDirectory }}\extracted" -DestinationDir "${{ parameters.workingDirectory }}\packed"
    workingDirectory: '${{ parameters.workingDirectory }}'
    condition: eq('${{ parameters.archiveType }}', 'zip')
    displayName: 'Re-compress Zip Package'

  - task: MSBuild@1
    displayName: 'Sign NuGet Packages'
    condition: eq('${{ parameters.archiveType }}', 'nupkg')
    inputs:
      solution: '${{ parameters.workingDirectory }}\SignFiles.proj'
      msbuildArguments: '/t:SignFiles /p:SignType=$(_SIGN_TYPE) /p:MicroBuildPluginDirectory=$(MicroBuildOverridePluginDirectory) /p:WorkingDir="${{ parameters.workingDirectory }}\packed"'

  - task: NuGetCommand@2
    displayName: 'Verify NuGet Packages'
    condition: eq('${{ parameters.archiveType }}', 'nupkg')
    inputs:
      command: 'custom'
      arguments: 'verify -All "${{ parameters.workingDirectory }}\packed\**\*.nupkg"'

  - task: CopyFiles@2
    displayName: 'Copy Signed Output'
    inputs:
      sourceFolder: '${{ parameters.workingDirectory }}\packed'
      targetFolder: '${{ parameters.targetFolder }}'

  - task: MicroBuildCleanup@1
    displayName: 'Clean Up Signing Tools'
    env:
      TeamName: '${{ parameters.teamName }}'
